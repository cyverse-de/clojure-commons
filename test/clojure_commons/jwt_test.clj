(ns clojure-commons.jwt-test
  (:use [clojure.test]
        [slingshot.slingshot :only [try+]])
  (:require [clojure-commons.jwt :as jwt])
  (:import [clojure.lang ExceptionInfo]))

(def user {:user        "ipctest"
           :email       "ipctest@iplantcollaborative.org"
           :given-name  "Ipc"
           :family-name "Test"
           :common-name "Ipc Test"})

(def opts {:validity-window-end  300
           :public-key-path      "test-resources/public-key.pem"
           :private-key-path     "test-resources/private-key.pem"
           :private-key-password "testkey"
           :accepted-keys-dir    "test-resources/accepted-keys"
           :alg                  :rs256})

(def second-opts {:validity-window-end  300
                  :private-key-path     "test-resources/private-keys/second-key.pem"
                  :private-key-password "second"
                  :alg                  :rs256})

(def untrusted-opts {:validity-window-end  300
                     :private-key-path     "test-resources/private-keys/untrusted.pem"
                     :private-key-password "untrusted"
                     :alg                  :rs256})

(def expired-opts (assoc opts :validity-window-end -1))

(def generator (jwt/generator opts))

(def second-generator (jwt/generator second-opts))

(def untrusted-generator (jwt/generator untrusted-opts))

(def expired-generator (jwt/generator expired-opts))

(def validator (jwt/validator opts))

(defn exception-cause
  [f]
  (try+
    (f)
    (catch [:type :validation] o
      (:cause o))))

(deftest jwt-test
  (is (= user (jwt/user-from-assertion (validator (generator user))))
      "Can validate a generated assertion.")
  (is (= user (jwt/user-from-assertion (validator (second-generator user))))
      "Can validate an assertion generated by a third party.")
  (is (= :signature (exception-cause #(validator (untrusted-generator user))))
      "Untrusted signature message for untrusted signing key.")
  (is (= :exp (exception-cause #(validator (expired-generator user))))
      "Expired token message for expired token."))
